generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Use DATABASE_URL for Prisma
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String?          @unique
  password        String
  country         String?
  avatarUrl       String?
  resetToken      String?          // <-- Add this line for password reset
  resetTokenExpiry DateTime?       // <-- Add this line for expiry
  posts           Post[]
  comments        Comment[]
  postLikes       PostLike[]
  postHelpfuls    PostHelpful[]
  commentLikes    CommentLike[]
  commentHelpfuls CommentHelpful[]
  savedPosts      SavedPost[]
  reports         Report[]
  notifications    Notification[]
  sentNotifications Notification[] @relation("NotificationFromUser")
}

model Post {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  content      String
  codeSnippet  String?
  createdAt    DateTime      @default(now())
  tags         String[]
  imageUrl     String?
  likes        Int           @default(0)
  helpfulCount Int           @default(0)
  author       User          @relation(fields: [authorId], references: [id])
  authorId     String        @db.ObjectId
  comments     Comment[]
  postLikes    PostLike[]
  postHelpfuls PostHelpful[]
  savedBy      SavedPost[]   @relation("PostToSavedPost")
  reports      Report[]      @relation("PostToReport")
}

model SavedPost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation("PostToSavedPost", fields: [postId], references: [id])
  postId String @db.ObjectId

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  avatarUrl String?
  imageUrl  String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  parentId  String?  @db.ObjectId // <-- Add this for nested comments

  commentLikes    CommentLike[]
  commentHelpfuls CommentHelpful[]
}

model PostLike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  @@unique([userId, postId])
}

model PostHelpful {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  @@unique([userId, postId])
}

model CommentLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId

  @@unique([userId, commentId])
}

model CommentHelpful {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId

  @@unique([userId, commentId])
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation("PostToReport", fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  reason    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  type      String   // 'like', 'helpful', 'comment', 'comment_like'
  postId    String?
  commentId String?
  fromUser  User?    @relation("NotificationFromUser", fields: [fromUserId], references: [id])
  fromUserId String? @db.ObjectId
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
